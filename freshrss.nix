{ pkgs, lib, ... }: {
  # Runtime

  services.nginx = {
    enable = true;
    virtualHosts."freshrss" = {
      locations."/" = { proxyPass = "http://127.0.0.1:5000"; };
    };
  };

  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."freshrss" = {
    image = "freshrss/freshrss:edge";
    environment = {
      "CRON_MIN" = "2,32";
      "FRESHRSS_ENV" = "development";
      "TZ" = "Africa/Ghana";
    };
    volumes = [
      "freshrss_data:/var/www/FreshRSS/data:rw"
      "freshrss_extensions:/var/www/FreshRSS/extensions:rw"
    ];
    ports = [ "5000:80/tcp" ];
    log-driver = "journald";
    extraOptions = [
      "--ip=172.18.0.8"
      "--network-alias=freshrss"
      "--network=freshrss_freshrss_network"
    ];
  };
  systemd.services."docker-freshrss" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-freshrss_freshrss_network.service"
      "docker-volume-freshrss_data.service"
      "docker-volume-freshrss_extensions.service"
    ];
    requires = [
      "docker-network-freshrss_freshrss_network.service"
      "docker-volume-freshrss_data.service"
      "docker-volume-freshrss_extensions.service"
    ];
    partOf = [ "docker-compose-freshrss-root.target" ];
    wantedBy = [ "docker-compose-freshrss-root.target" ];
  };
  virtualisation.oci-containers.containers."fulltext_rss" = {
    image = "heussd/fivefilters-full-text-rss";
    volumes = [ "freshrss__text_data:/config:rw" ];
    ports = [ "4999:80/tcp" ];
    log-driver = "journald";
    extraOptions = [
      "--ip=172.18.0.2"
      "--network-alias=fulltext_rss"
      "--network=freshrss_freshrss_network"
    ];
  };
  systemd.services."docker-fulltext_rss" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-freshrss_freshrss_network.service"
      "docker-volume-freshrss__text_data.service"
    ];
    requires = [
      "docker-network-freshrss_freshrss_network.service"
      "docker-volume-freshrss__text_data.service"
    ];
    partOf = [ "docker-compose-freshrss-root.target" ];
    wantedBy = [ "docker-compose-freshrss-root.target" ];
  };

  # Networks
  systemd.services."docker-network-freshrss_freshrss_network" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f freshrss_freshrss_network";
    };
    script = ''
      docker network inspect freshrss_freshrss_network || docker network create freshrss_freshrss_network --driver=bridge --subnet=172.18.0.0/24
    '';
    partOf = [ "docker-compose-freshrss-root.target" ];
    wantedBy = [ "docker-compose-freshrss-root.target" ];
  };

  # Volumes
  systemd.services."docker-volume-freshrss__text_data" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect freshrss__text_data || docker volume create freshrss__text_data
    '';
    partOf = [ "docker-compose-freshrss-root.target" ];
    wantedBy = [ "docker-compose-freshrss-root.target" ];
  };
  systemd.services."docker-volume-freshrss_data" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect freshrss_data || docker volume create freshrss_data
    '';
    partOf = [ "docker-compose-freshrss-root.target" ];
    wantedBy = [ "docker-compose-freshrss-root.target" ];
  };
  systemd.services."docker-volume-freshrss_extensions" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect freshrss_extensions || docker volume create freshrss_extensions
    '';
    partOf = [ "docker-compose-freshrss-root.target" ];
    wantedBy = [ "docker-compose-freshrss-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-freshrss-root" = {
    unitConfig = { Description = "Root target generated by compose2nix."; };
    wantedBy = [ "multi-user.target" ];
  };
}
